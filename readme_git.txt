# Дополнение к Уроку 2 (не обязательно)
# --- Установка Git в Ubuntu 22.04 ---
# Перед тем как использовать Git, его необходимо установить в вашей системе.
# Откройте терминал (обычно Ctrl + Alt + T) и выполните следующие команды:

# 1. Обновите список пакетов, чтобы получить самую свежую информацию о доступных версиях.

sudo apt update

# 2. Установите Git. Флаг '-y' автоматически подтверждает установку.

sudo apt install git -y

# --- Проверка версии установленного Git ---
# После установки убедитесь, что Git успешно установлен и доступен.
# Эта команда выведет на экран номер версии Git.

git --version

# --- Настройка глобальных данных пользователя для Git-коммитов ---
# Это важно для идентификации ваших коммитов. Эти данные будут отображаться
# в истории коммитов Git. Замените "your@gmail.com" и "Your Name" на свои реальные данные.

git config --global user.email "your@gmail.com"
git config --global user.name "Your Name"

# Примечание: '--global' означает, что эти настройки будут применяться
# ко всем вашим Git-репозиториям на этом компьютере.

# --- Инициализация нового Git-репозитория в текущей директории ---
# Эта команда создает пустой репозиторий Git или повторно инициализирует существующий.
# Она создает скрытую папку '.git' в текущей директории, где Git хранит все данные.

git init

# --- Проверка текущего статуса репозитория ---
# После инициализации, эта команда покажет, что вы находитесь на новой ветке 'master'
# и что нет никаких коммитов.

git status

# --- Переименование основной ветки с 'master' на 'main' ---
# 'main' становится новым стандартом для основной ветки Git.

git branch -m master main

# --- Повторная проверка статуса ---
# Теперь Git покажет, что вы находитесь на ветке 'main'.

git status

# --- Добавление всех файлов в индекс и первый коммит ---
# Добавьте все текущие файлы и папки в репозиторий. '.' означает "текущая директория".

git add .

# Создание первого коммита. Это будет отправная точка вашего проекта.

git commit -m '1'

# --- Создание веток для каждого урока ---
# Мы создаем ветки, исходя из текущего состояния 'main'.
# Это позволяет работать над каждым уроком изолированно.

# Создаем ветку для Урока 1 и сразу переключаемся на нее.
# Это удобно, чтобы сразу начать работу над новым уроком.

git checkout -b lesson_01

# Теперь вы находитесь в ветке 'lesson_01'.
# Здесь вы выполняете все действия, относящиеся к Уроку 1:
# - добавляете/изменяете код
# - регулярно делаете коммиты:
#   git add .
#   git commit -m 'versions pro'

# Создаем ветку для Урока 2.
# Важно: Чтобы новая ветка основывалась на состоянии 'main', а не на 'lesson_01',
# указываем 'main' в конце команды.

git checkout -b lesson_02 main
	
# Создаем ветку для Урока 3.

git checkout -b lesson_03 main

...
git checkout -b lesson_end main

# --- Переключение на основную ветку для слияния ---
# После того как вы поработали над каждым уроком в его ветке
# (и сделали необходимые коммиты в каждой из них),
# пришло время объединить эти изменения в основной проект.

git checkout main

# --- Слияние веток уроков в 'main' ---
# Git будет сливать изменения из указанной ветки в текущую ветку ('main').
# Если будут конфликты (когда одни и те же строки кода были изменены по-разному в разных ветках),
# их нужно будет разрешить вручную перед завершением слияния.

# Слияние Урока 1 в 'main'

git merge lesson_01

# Слияние Урока 2 в 'main'

git merge lesson_02

# Слияние Урока 3 в 'main'

git merge lesson_03

# --- Сравнение двух веток (например, main и lesson_03)

git diff main lesson_03

# --- Удаление веток уроков (опционально) ---
# После успешного слияния, если вам больше не нужна отдельная ветка для урока
# (например, если урок завершен и его код полностью интегрирован),
# вы можете удалить эти ветки.
# Ключ '-d' позволяет удалить только полностью слитые ветки,
# что предотвращает случайную потерю несведенных изменений.

git branch -d lesson_01
git branch -d lesson_02
git branch -d lesson_03

# Если вы хотите удалить ветку, которая еще не была полностью слита
# (например, если работа по уроку была отменена),
# используйте ключ '-D' (например, 'git branch -D lesson_01').
# Будьте осторожны с '-D', так как это удалит ветку без предупреждения о несведенных изменениях.


===========================================
# Локальные команды, коротко
git --version
git init
git branch -m master main
git config user.email "your@gmail.com"
git config user.name "Your Name"
# Первый коммит
git add .
git commit -m 'first commit'

# --- Урок 1: Урок 1 Версии ПО для работы с Docker ---
git branch lesson_01
git checkout lesson_01
	или одной командой
git checkout -b lesson_01 main # Создание и переключение на ветку lesson_01

# Вносите изменения для урока 1
git add .
git commit -m 'Lesson 1'
# Возможно, еще коммиты add text
git add .
git commit -m 'versions soft'

# Завершение урока 1
git checkout main
git merge lesson_01
	git branch -d lesson_01 # Удаление ветки lesson_01 !Если не нужна

		# - Если вы находитесь в lesson_01:
	# git checkout -b lesson_02 (без main в конце) создаст lesson_02 от lesson_01.
	# git checkout -b lesson_02 main создаст lesson_02 от main.

# --- Урок 2: Установка Laravel 12, sail, Breeze, Spatie, запуск проекта ---
git branch lesson_02 # Создание ветки lesson_02
git checkout lesson_02 # Переключение на ветку lesson_02

	или одной командой
git checkout -b lesson_02 main # Создание и переключение на ветку lesson_02

# Вносите изменения для урока 2 
git add .
git commit -m 'less2 Laravel 12 sail Breeze Spatie'

# Завершение урока 2
git checkout main
git merge lesson_02
	git branch -d lesson_02 # Удаление ветки lesson_02 !Если не нужна

# И так далее для каждого урока...

--- сравнить две ветки (например, main и lesson_02)
git diff main lesson_02
q выход

# --- Урок 3: ---
git branch lesson_03 # Создание ветки lesson_03
git checkout lesson_03 # Переключение на ветку lesson_03

	или одной командой 1111
git checkout -b lesson_03 main # Создание и переключение на ветку lesson_03

git add .
git commit -m 'less3'

--- список команд
history
--- очистить список
history -c
---
