=== Урок 4_4 Обработка сообщений ошибок. Blade-компоненты. Пример принципа "не повторять" - DRY. 

============================================
=== Laravel 12 === ~/project1/la12sail1 ===
============================================
    GitHub (урок 4_4):
https://github.com/AS7go/la12sail1/tree/lesson_04_4

Документация:

    Laravel 12
https://laravel.com/docs/12.x/installation
    Laravel 12 csrf
https://laravel.com/docs/12.x/csrf

    Spatie v6
https://spatie.be/docs/laravel-permission/v6/installation-laravel

    Bootstrap 5
https://getbootstrap.com/docs/5.0/getting-started/introduction/
    Стиль кнопок Bootstrap 5
https://getbootstrap.com/docs/5.0/components/buttons/
    Стили Форм
https://getbootstrap.com/docs/5.0/forms/form-control/

--- Открыть терминал.
--- Перейти в директорию проекта.
cd project1/la12sail1

--- Запустить VScode.
code .

--- Запустить контейнеры
sail up -d

--- Работаем с проектом

--- Перед закрытием проекта желательно остановить контейнеры:
sail down

--- Вход на сайт
http://localhost/
admin@gmail.com
12345678

--- Вход в базу данных
http://localhost:8080
root
password

===============================================================================================================

=== Повторение кода допустимо в редких случаях, когда:

- Преждевременная оптимизация (YAGNI — You Aren’t Gonna Need It "Тебе это не пригодится"): 
Ранняя стадия проекта, нет уверенности в необходимости общей абстракции, 
а объединение кода сейчас излишне усложняет.

- Мелкие, изолированные фрагменты: Дублирование нескольких строк не ухудшает читаемость и не создает 
значительных накладных расходов.

- Улучшение читаемости/ясности: Объединение кода делает его менее понятным или требует сложных абстракций.

- Критичная производительность: (Крайне редко) После профилирования доказано, что дублирование значительно 
повышает скорость.

- Разные контексты: Похожий код в несвязанных модулях, которые, скорее всего, будут меняться независимо.

=== Пример применения принципа DRY (Don’t Repeat Yourself - Не повторяйся).

Выносим повторяющийся блок кода для вывода сообщений о статусе/успехе и ошибках валидации 
из отдельных представлений (add-new-post.blade.php и edit-new-post.blade.php) 
в наш основной макет resources/views/layouts/app.blade.php

--- Почему это правильно и соответствует DRY:

Устранение дублирования: Вместо того чтобы иметь одинаковый код в нескольких файлах, 
он будет находиться в одном месте.

Централизованное управление: Если вы решите изменить внешний вид (стили, классы CSS) 
этих уведомлений, вам нужно будет внести изменения только в app.blade.php, 
а не в каждый отдельный шаблон.

Улучшенная читаемость: Ваши формы (add-new-post.blade.php и edit-new-post.blade.php) станут 
чище и сфокусируются исключительно на своей основной задаче — отображении формы.

Глобальная доступность: Сообщения сессии (session('status'), session('success')) и объект $errors 
автоматически доступны во всех представлениях Laravel, которые используют макет app.blade.php.

--- добавляем код в resources/views/layouts/app.blade.php

<!-- Page Content -->
<main>
    <!-- Добавили обработку success, status и ошибок валидации -->
    <div class="py-4">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            {{-- Вывод status --}}
            @if (session('status'))
                {{-- <div class="alert alert-success"> --}}
                <div class="alert alert-info">
                    {{ session('status') }}
                </div>
            @endif
        
            {{-- Вывод success --}}
            @if (session('success'))
                <div class="alert alert-success">
                    {{ session('success') }}
                </div>
            @endif

            {{-- Вывод ошибок валидации --}}
            @if ($errors->any())
                <div class="alert alert-danger mt-4">
                    <ul>
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            {{ $slot }}
        </div>
    </div>

</main>


=== Описание взаимодействия шаблонов, подстановка 

Макет app.blade.php (или, более точно, resources/views/layouts/app.blade.php) используется другими 
Blade-представлениями нашего приложения как базовая структура (шаблон) страницы.

- В контексте Laravel и Blade, это достигается одним из двух основных способов:

С помощью Blade-компонентов (как в нашем случае x-app-layout):
Это современный и рекомендуемый способ в Laravel, особенно если мы используем Breeze или Jetstream.
Когда мы видим в своих файлах, таких как add-new-post.blade.php или edit-new-post.blade.php, 
следующую строку в самом начале:

	<x-app-layout>
		{{-- ... содержимое нашей страницы ... --}}
	</x-app-layout>

- Это означает, что весь контент, который находится внутри тегов <x-app-layout> и </x-app-layout>, 
будет вставлен в макет app.blade.php в то место, где находится переменная {{ $slot }}.

Таким образом, наш add-new-post.blade.php или edit-new-post.blade.php не являются полноценными 
HTML-документами (у них нет своих <head>, <body> и т.д.), они лишь предоставляют содержимое 
для "слота" в app.blade.php.

- С помощью директив @extends и @section (более традиционный способ):
Хотя в нашем коде используется компонент x-app-layout, исторически и до сих пор часто используется 
такой подход:

	// В add-new-post.blade.php
	@extends('layouts.app') // Указывает, что этот файл расширяет макет layouts/app.blade.php

	@section('content') // Определяет секцию с именем 'content'
		{{-- ... содержимое нашей страницы ... --}}
	@endsection

А в layouts/app.blade.php тогда вместо {{ $slot }} будет @yield('content').

- Таким образом, app.blade.php используется как "скелет" для всех страниц, которые его "расширяют" 
или "включают" через компонент x-app-layout. Все общие элементы (head, body, навигация, футер, 
а теперь и наши блоки сообщений/ошибок) определены в app.blade.php один раз, и автоматически 
отображаются на всех страницах, которые используют этот макет.

================================================================================================

--- Удаляем из resources/views/dashboard.blade.php код:

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    {{ __("You're logged in!") }}
                </div>
            </div>
        </div>
    </div>


--- Отредактируем вывод сообщений в app/Http/Controllers/PostController.php

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'text' => 'required|string',
        ]);

        // Post::create($request->all());
        // Создаем новую запись в базе данных 'posts'
        
        $post = Post::create($request->all());
        // Создаем новую запись в базе данных 'posts' и сохраняем созданный объект поста в переменную $post.

        // return redirect()->back()->with('status', 'Post added!');
        // Перенаправляет пользователя на предыдущую страницу, с которой был отправлен запрос,
        // и добавляет временное сообщение 'Post added!' в сессию под ключом 'status'.

        return redirect()->route('dashboard')->with('success', "Post ({$post->name}) added!"); // !Кавычки "" а не ''
        // Перенаправляет пользователя на маршрут с именем 'dashboard' (например, главную страницу админки),
        // и добавляет временное сообщение об успехе 'Post (<название поста>) added!' в сессию под ключом 'success'.
        // Это сообщение будет видно на странице 'dashboard'.

    }

    public function edit($id)
    {
        $post = Post::findOrFail($id);

        return view('edit-new-post', compact(['post']));
    }

    public function update($id, Request $request)
    {
        $request->validate([
            'name'=>'required|string|max:255',
            'text'=>'required|string',
        ]);

        $post = Post::findOrFail($id); //Снова находит пост по $id, чтобы убедиться, что он есть и можно его обновить.
        $post->update($request->all()); // Обновляет атрибуты найденного поста данными из запроса.
            // Метод update() в Eloquent ORM принимает массив данных и обновляет соответствующие поля в базе данных.
            // т. е. передает заполненные поля формы в таблицу Posts

        return redirect()->route('dashboard')->with('success', "Post ({$post->name}) updated!");

    }
    
    
--- Повторное получение $post с помощью Post::findOrFail($id); в методе update является правильным и необходимым 
шагом для обеспечения корректной работы, безопасности и целостности данных в Laravel-приложениях. 
Это не то дублирование, от которого следует избавляться, так как оно служит разным целям в разных запросах.


--- Laravel не делает различий между status и success сам по себе. Это просто разные ключи в массиве сессии.
- status (или info, message):

Назначение: Общие информационные сообщения, подтверждения, не всегда "успех".
Стилизация: Часто синий (alert-info) или серый фон.

- success:

Назначение: Четко указывает на успешное завершение операции, позитивный результат.
Стилизация: Почти всегда зеленый фон (alert-success).

--- Удаляем повторяющийся код из add-new-post.blade.php и edit-new-post.blade.php.

=======================================================================================

