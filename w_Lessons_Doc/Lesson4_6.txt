=== Урок 4_6 Сделаем логику проверки на изменения в методе update перед записью в базу данных.

============================================
=== Laravel 12 === ~/project1/la12sail1 ===
============================================
    GitHub (урок 4_6):
https://github.com/AS7go/la12sail1/tree/lesson_04_6

    GitHub Текстовое Описание урока 
https://github.com/AS7go/la12sail1/blob/lesson_04_6/w_Lessons_Doc/Lesson4_6.txt

Документация:

    Laravel 12
https://laravel.com/docs/12.x/installation
    Laravel 12 csrf
https://laravel.com/docs/12.x/csrf

    Spatie v6
https://spatie.be/docs/laravel-permission/v6/installation-laravel

    Bootstrap 5
https://getbootstrap.com/docs/5.0/getting-started/introduction/
    Стиль кнопок Bootstrap 5
https://getbootstrap.com/docs/5.0/components/buttons/
    Стили Форм
https://getbootstrap.com/docs/5.0/forms/form-control/

--- Открыть терминал.
--- Перейти в директорию проекта.
cd project1/la12sail1

--- Запустить VScode.
code .

--- Запустить контейнеры
sail up -d

--- Работаем с проектом

--- Перед закрытием проекта желательно остановить контейнеры:
sail down

--- Вход на сайт
http://localhost/
admin@gmail.com
12345678

--- Вход в базу данных
http://localhost:8080
root
password

--- Команды Git

хх - номер урока, например (lesson_04_6)
	// Добавляет все измененные файлы в индекс (staging area) для следующего коммита.
git add .

	// Создает новый коммит с указанным комментарием. Комментарий должен описывать изменения.
git commit -m 'your comment'

	// Переключает текущую ветку на ветку 'main'. Все последующие изменения будут вноситься в эту ветку.
git checkout main

	// Объединяет (сливает) изменения из ветки 'lesson_хх' в текущую ветку (в данном случае, в 'main').
git merge lesson_хх

	// Создает новую ветку с именем 'lesson_хх' на основе ветки 'main' и сразу же переключается на нее.
git checkout -b lesson_хх main

		// !Внимательно - Принудительно удаляет ветку 'lesson_хх', если в ветке есть неслитые изменения.
	git branch -D lesson_хх

		// !Внимательно - Альтернативный синтаксис для принудительного удаления ветки.
	git branch --delete --force lesson_хх

		// !Внимательно - "Безопасное" удаление, если ветка полностью замержена (слита в main)
	git branch -d lesson_хх
		или 
	git branch --delete lesson_хх

===============================================================================================================

--- Сделаем логику проверки на изменения в методе update файла app/Http/Controllers/PostController.php


public function update($id, Request $request)
{
    $request->validate([
        'name'=>'required|string|max:255',
        'text'=>'required|string',
    ]);

    $post = Post::findOrFail($id);

    // Получаем только те данные из запроса, которые мы хотим обновить
    $validatedData = $request->only(['name', 'text']);

    // Проверяем, есть ли реальные изменения
    // Метод fill() применяет новые значения к модели, но не сохраняет их в БД.
    // isDirty() затем проверяет, отличаются ли новые значения от текущих в БД.
    $post->fill($validatedData);

    if ($post->isDirty()) { // Если хотя бы одно из заполненных полей изменилось
        $post->save(); // Сохраняем изменения в базу данных
        $message = "Post ({$post->name}) updated!";
    } else {
        $message = "Post ({$post->name}) has no changes."; // Сообщение, если изменений нет
    }

    return redirect()->route('dashboard')->with('success', $message);
    
}


=== Описание метода update в app/Http/Controllers/PostController.php

public function update($id, Request $request) // Объявляем метод update для обновления существующего поста в базе 
                                              // данных, принимающий ID поста и объект запроса.

            // описание - update($id, Request $request):
            // Метод update предназначен для изменения конкретного поста.
            // $id говорит нам, какой именно пост нужно изменить.
            // Request $request предоставляет новые данные, на которые пост должен быть изменен.

Request $request предоставляет новые данные, на которые пост должен быть изменен.
{
    $request->validate([ // Выполняет валидацию входящих данных из HTTP-запроса на соответствие заданным правилам.
        'name'=>'required|string|max:255', // поле 'name' является обязательным, должно быть строкой, не длиннее 255 
        'text'=>'required|string',         // поле 'text' является обязательным и должно быть строкой.
    ]);

    $post = Post::findOrFail($id); // Находит пост в базе данных по переданному $id. Если пост не найден, 
                                   // автоматически выбрасывает исключение (404 Not Found).

    // Получаем только те данные из запроса, которые мы хотим обновить
    $validatedData = $request->only(['name', 'text']); // Извлекает только поля 'name' и 'text' из валидированных 
                                                       // данных запроса.

    // Проверяем, есть ли реальные изменения
    // Метод fill() применяет новые значения к модели, но не сохраняет их в БД.
    // isDirty() затем проверяет, отличаются ли новые значения от текущих в БД.
    $post->fill($validatedData); // Применяет полученные $validatedData к атрибутам объекта $post в памяти, не сохраняя их в базу данных.

    if ($post->isDirty()) { // Условный блок: проверяет, были ли какие-либо изменения в атрибутах модели $post после вызова fill(), 
                            // по сравнению с исходными данными из БД.
        // Если хотя бы одно из заполненных полей изменилось
        $post->save(); // Сохраняет изменения атрибутов объекта $post в базу данных (выполняет SQL UPDATE).
        $message = "Post ({$post->name}) updated!"; // Определяет сообщение об успешном обновлении поста, включая его имя.
    } else { // Блок else: выполняется, если изменений в полях поста не было.
        $message = "Post ({$post->name}) has no changes."; // Определяет сообщение о том, что изменений в посте не обнаружено.
    }

    return redirect()->route('dashboard')->with('success', $message); // Перенаправляет пользователя на маршрут 'dashboard'
                              // и добавляет флеш-сообщение ($message) в сессию, которое будет доступно в следующем запросе.
}


=== Проверка изменений перед обновлением базы данных необходима для:

- Оптимизации производительности: Избегает ненужных SQL-запросов UPDATE к базе данных, если 
фактических изменений в данных не было.

- Точности updated_at: Гарантирует, что поле updated_at обновляется только при реальных 
изменениях в записи, делая историю изменений более достоверной.

- Улучшения пользовательского опыта (UX): Позволяет выводить точное сообщение о результате 
(например, "Пост обновлен!" или "Изменений не обнаружено.").

- Чистоты логов: Предотвращает запись "пустых" изменений в системы аудита.

=== Коротко: Метод fill() применяет данные к модели в памяти, а isDirty() проверяет, 
отличаются ли они от исходных, решая, нужно ли вызывать save().

--- Добавим в resources/views/dashboard.blade.php
                                
<div class="card-body">
	<p>Created {{ $post->created_at }}</p>
    <p>Updated {{ $post->updated_at }}</p>                
    <p>{{ $post->text }}</p>




======================================================================================================================

