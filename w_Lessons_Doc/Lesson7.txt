Урок 7 Добавим возможность редактирования "Email" и уникальность "name", "email". 
Демонстрация проекта (Spatie, Sail, Breeze, phpMyAdmin).


    GitHub (урок 7):
https://github.com/AS7go/la12sail1/tree/lesson_07

    GitHub Текстовое Описание урока 
https://github.com/AS7go/la12sail1/blob/lesson_07/w_Lessons_Doc/Lesson7.txt

--- Вход на сайт
http://localhost/
admin@gmail.com
12345678

--- Пользователи (примеры учетных записей)
http://localhost/
test1@gmail.com
12345678

Mike
mike@gmail.com
12345678

Max
mike@gmail.com
12345678

--- Вход в базу данных
http://localhost:8080
root
password

==============================================================================================================================
--- Демонстрация до редактирования 

--- Добавим возможность редактирования поля "Email" в меню "Users" по кнопке "Edit" и проверки на уникальность "email", "name"

--- Убираем "readonly" - это разблокирует поле "email". Файл resources/views/users/edit.blade.php

<div class="form-group">
    <label for="exampleInputEmail1">Email</label>
    {{-- <input type="text" name="email" value="{{$user->email}}" class="form-control mb-3" id="exampleInputEmail1" readonly> --}}
    <input type="text" name="email" value="{{$user->email}}" class="form-control mb-3" id="exampleInputEmail1">
</div>

--- Добавляем обработку "Email" в app/Http/Controllers/UserController.php с защитой от повторения
--- Добавляем защиту от повторения "name" (уникальность имени пользователя)

<?php

use App\Models\User; // Импорт модели User.
use Illuminate\Http\Request; // Импорт класса Request для обработки запросов.
use Spatie\Permission\Models\Role; // Импорт модели Role из пакета Spatie.
use Illuminate\Support\Facades\Hash; // Импорт фасада Hash для хеширования паролей.

use Illuminate\Validation\Rule; // < - Добавлен импорт Rule (Правило) для уникальной валидации email


class UserController extends Controller
{
    // ... (остальные методы index, create, store, show, edit остаются без изменений) ...

    /**
     * Update the specified resource in storage.
     * Обновляет пользователя, предотвращая изменение на роль 'super-user'
     * и запрещая обновление самого 'super-user'.
     */
    public function update(Request $request, User $user)
    {
        // Защита: предотвращаем обновление пользователя с ролью 'super-user'.
        if ($user->hasRole('super-user')) {
            return redirect()->route('users.index')->with('error', 'The "super-user" cannot be updated through this interface.');
        }

        $request->validate([
            // 'name'=>'required|max:255',
            'name' => [ // Добавлены правила валидации для name
                'required',
                'string',
                'max:255',
                Rule::unique('users', 'name')->ignore($user->id), //Разрешает пользователю сохранить имя, но требует уникальности среди других.
            ],

            'email' => [ // Добавлены правила валидации для email
                'required',
                'email',
                Rule::unique('users', 'email')->ignore($user->id), //Разрешает пользователю сохранить email, но требует уникальности среди других.
            ],
            'role_id' => 'required|integer|exists:roles,id',
        ]);

        $selectedRole = Role::find($request->role_id);

        // Проверяем, не пытается ли пользователь присвоить роль 'super-user' при обновлении.
        if ($selectedRole && $selectedRole->name === 'super-user') {
            return redirect()->back()->withInput()->with('error', 'The "super-user" role cannot be assigned.');
        }

        $user->update([
            'name' => $request->name,
            'email' => $request->email, // <-- Теперь email будет обновляться
        ]);

        $user->syncRoles([$selectedRole->name]);

        return redirect()->route('users.index')->with('success', "User ({$user->name}) updated.");

    }

    // ... (метод destroy остается без изменений) ...
}

--- Экспорт, Импорт базы данных.

--- Добавляем новую роль и права: 
Manager

--- Создадим нового пользователя и выберем роль:
Jo
jo@gmail.com
12345678

--- Включение и отключение пользователя - show posts.

--- Рассмотрим в базе данных связь пользователя, роли и разрешений.

=== Проект для обучения. Возможны доработки и улучшения. Основная суть передана.
Если есть предложения по улучшению проекта, ошибки и неточности - пишите в комментариях.

